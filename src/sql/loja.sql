------------------------------------------------------------
--CRIAÇÃO DA TABELA DE PRODUTOS
------------------------------------------------------------
CREATE TABLE LOJ_PRODUTO(
	PRO_IN_CODIGO INT NOT NULL IDENTITY CONSTRAINT LOJ_PK_PRODUTO PRIMARY KEY,
	PRO_CH_CODBARRAS CHAR(4) NOT NULL CONSTRAINT LOJ_UK_PRO_CODBARRAS UNIQUE 
									  CONSTRAINT LOJ_CK_PRO_CODBARRAS CHECK(PRO_CH_CODBARRAS LIKE '[0-9][0-9][0-9][0-9]'),
	PRO_ST_NOME VARCHAR(50) NOT NULL,
	PRO_ST_CATEGORIA VARCHAR(20) NOT NULL,
	PRO_RE_PRECO NUMERIC(12,2) NOT NULL CONSTRAINT LOJ_DF_PRO_PRECO DEFAULT 0 CONSTRAINT LOJ_CK_PRO_PRECO CHECK(PRO_RE_PRECO>=0),
	PRO_DT_INCLUSAO SMALLDATETIME NULL CONSTRAINT LOJ_DF_PRO_INCLUSAO DEFAULT GETDATE(),
)

------------------------------------------------------------
-- PROCEDURE DE INSERT
------------------------------------------------------------
CREATE PROCEDURE SP_I_LOJ_PRODUTO

@CODBARRAS CHAR(4),
@NOME VARCHAR(50),
@CATEGORIA VARCHAR(20),
@PRECO NUMERIC(12,2),
@INCLUSAO SMALLDATETIME,
@CODIGOGERADO INT=0 OUT
AS

SET NOCOUNT ON --DESLIGA AS LINHAS AFETADAS

DECLARE @NR_CODBARRAS INT 

--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL @NR_CODBARRAS
SELECT @NR_CODBARRAS = COUNT(PRO_CH_CODBARRAS)
FROM LOJ_PRODUTO
WHERE PRO_CH_CODBARRAS = @CODBARRAS

--COMPARANDO SE O TOTAL É MAIOR QUE ZERO (JÁ EXISTE NO BD)
IF @NR_CODBARRAS > 0
BEGIN
  RAISERROR('O código de barras já existe!',15,1)
  RETURN
END

--COMPARANDO SE O PREÇO É NEGATIVO
IF @PRECO < 0
BEGIN
	RAISERROR('O preço do produto não pode ser negativo',15,1)
	RETURN
END

--COMPARANDO O TAMANHO DA STRING DOS CAMPOS PLACA, NOME, DESCRIÇÃO
IF (LEN(TRIM(@NOME)) =  0) OR (LEN(TRIM(@CATEGORIA)) = 0) OR (LEN(TRIM(@CODBARRAS)) <> 4)
BEGIN
	RAISERROR('O nome, a categoria e o código de barras são obrigatórios!',15,1)
	RETURN
END

INSERT INTO LOJ_PRODUTO (PRO_CH_CODBARRAS,PRO_ST_NOME,PRO_ST_CATEGORIA,PRO_RE_PRECO,PRO_DT_INCLUSAO) 
	VALUES (@CODBARRAS,UPPER(@NOME),UPPER(@CATEGORIA),@PRECO,@INCLUSAO)
	SET @CODIGOGERADO = SCOPE_IDENTITY() /*RETORNA O VALOR DO IDENTITY ATUAL*/
	PRINT @CODIGOGERADO -- NÃO É NECESSÁRIO NO PROJETO FINAL
	RETURN @CODIGOGERADO
GO

------------------------------------------------------------
-- PROCEDURE DE SELECT DE TODOS OS PRODUTOS
------------------------------------------------------------
CREATE PROCEDURE SP_S_LOJ_PRODUTO
AS

SELECT
	PRO_CH_CODBARRAS AS 'CÓDIGO DE BARRAS',
	UPPER(PRO_ST_NOME) AS 'NOME',
	UPPER(PRO_ST_CATEGORIA) AS 'CATEGORIA',
	PRO_RE_PRECO AS 'PREÇO',
	CONVERT(CHAR(10),PRO_DT_INCLUSAO,103) AS 'DATA DE INCLUSÃO'
FROM LOJ_PRODUTO
ORDER BY PRO_DT_INCLUSAO
RETURN

------------------------------------------------------------
-- PROCEDURE DE SELECT DE 1 PRODUTO
------------------------------------------------------------
CREATE PROCEDURE SP_S_LOJ_PRODUTO_CODBARRAS
@CODBARRAS CHAR(4) --PARÂMETRO DE ENTRADA
AS

SELECT 
	PRO_CH_CODBARRAS AS 'CÓDIGO DE BARRAS',
	UPPER(PRO_ST_NOME) AS 'NOME',
	UPPER(PRO_ST_CATEGORIA) AS 'CATEGORIA',
	PRO_RE_PRECO AS 'PREÇO',
	CONVERT(CHAR(10),PRO_DT_INCLUSAO,103) AS 'DATA DE INCLUSÃO'
FROM 
	LOJ_PRODUTO
WHERE
	PRO_CH_CODBARRAS = @CODBARRAS
GO

------------------------------------------------------------
-- PROCEDURE DE UPDATE
------------------------------------------------------------
CREATE PROCEDURE SP_U_LOJ_PRODUTO

@CODBARRAS CHAR(4),
@NOME VARCHAR(50),
@CATEGORIA VARCHAR(20),
@PRECO NUMERIC(12,2),
@INCLUSAO SMALLDATETIME,
@CODIGOGERADO INT=0 OUT
AS

SET NOCOUNT ON --DESLIGA AS LINHAS AFETADAS

DECLARE @NR_CODBARRAS INT 

--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL @NR_PLACA
SELECT @NR_CODBARRAS = COUNT(PRO_CH_CODBARRAS)
FROM LOJ_PRODUTO
WHERE PRO_CH_CODBARRAS = @CODBARRAS

--COMPARANDO SE O TOTAL É IGUAL À ZERO (NÃO EXISTE NO BD)
IF @NR_CODBARRAS = 0
BEGIN
  RAISERROR('Não foi possível alterar o produto, o código de barras não existe!',15,1)
  RETURN
END

--COMPARANDO SE O PREÇO É NEGATIVO
IF @PRECO < 0
BEGIN
	RAISERROR('O preço do produto não pode ser negativo',15,1)
	RETURN
END

--COMPARANDO O TAMANHO DA STRING DOS CAMPOS PLACA, NOME, DESCRIÇÃO
IF (LEN(TRIM(@NOME)) =  0) OR (LEN(TRIM(@CATEGORIA)) = 0) OR (LEN(TRIM(@CODBARRAS)) <> 4)
BEGIN
	RAISERROR('O nome, a categoria e o código de barras são obrigatórios!',15,1)
	RETURN
END

UPDATE LOJ_PRODUTO
SET PRO_CH_CODBARRAS = @CODBARRAS,
	PRO_ST_NOME = @NOME,
	PRO_ST_CATEGORIA = UPPER(@CATEGORIA),
	PRO_RE_PRECO = @PRECO,
	PRO_DT_INCLUSAO = @INCLUSAO
WHERE PRO_CH_CODBARRAS = @CODBARRAS
GO

------------------------------------------------------------
-- PROCEDURE DE DELETE
------------------------------------------------------------
CREATE PROCEDURE SP_D_LOJ_PRODUTO
@CODBARRAS CHAR(4) 
AS
SET NOCOUNT ON
DECLARE @NR_CODBARRAS INT

SELECT @NR_CODBARRAS = COUNT(PRO_CH_CODBARRAS)
	FROM LOJ_PRODUTO
	WHERE PRO_CH_CODBARRAS = @CODBARRAS

IF @NR_CODBARRAS = 0
BEGIN
	RAISERROR('Não é possível efetuar a exclusão, o código de barras não existe!',15,1)
	RETURN
END

DELETE FROM LOJ_PRODUTO WHERE PRO_CH_CODBARRAS = @CODBARRAS
RETURN
GO
------------------------------------------------------------
-- CHAMADAS DAS PROCEDURES (TESTES)
------------------------------------------------------------
SP_S_LOJ_PRODUTO --SELECT DE TODOS OS PRODUTOS

SP_D_LOJ_PRODUTO '2120' --DELETE DE UM PRODUTO

SP_S_LOJ_PRODUTO_CODBARRAS '2120' --SELECT DE UM PRODUTO PELO CÓDIGO DE BARRAS

SP_I_LOJ_PRODUTO '1234','cAIXA DE SOM','Eletrônicos', 300, '2021-09-26' --INSERT NA TABELA DE PRODUTOS

SP_I_LOJ_PRODUTO '3000','Pulseira de relógio','Acessórios', 15, '' --INSERT NA TABELA DE PRODUTOS

SP_U_LOJ_PRODUTO '1234','cAIXA DE SOM','Eletrônicos', 315, '2021-09-26' --UPDATE NA TABELA DE PRODUTOS